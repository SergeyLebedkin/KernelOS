#ifndef STREAMBUF
#define STREAMBUF

#include <ios>
#include <locale>
#include <string>

// std namespace
namespace std {
    // Base buffer class for streams
    template<class charT, class traits> class basic_streambuf {
        // types
        typedef charT char_type;
        typedef traits traits_type;
        typedef typename traits_type::int_type int_type;
        typedef typename traits_type::pos_type pos_type;
        typedef typename traits_type::off_type off_type;

        // destructor
        virtual ~basic_streambuf() {}

        // locale
        locale pubimbue(const locale &loc) {}
        locale getloc() const {}

        // buffer and positioning
        basic_streambuf *pubsetbuf(char_type *s, streamsize n) {}
        pos_type pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which = ios_base::in | ios_base::out) {}
        pos_type pubseekpos(pos_type sp, ios_base::openmode which = ios_base::in | ios_base::out) {}
        int pubsync() {}

        // get
        streamsize in_avail() {}
        int_type snextc() {}
        int_type sbumpc() {}
        int_type sgetc() {}
        streamsize sgetn(char_type *s, streamsize n) {}

        // putback
        int_type sputbackc(char_type c) {}
        int_type sungetc() {}

        // put
        int_type sputc(char_type c) {}
        streamsize sputn(const char_type *s, streamsize n) {}

    protected:
        // constructors
        basic_streambuf() {}
        basic_streambuf(const basic_streambuf &rhs) {}
    };
} // namespace std

#endif // STREAMBUF